hist(x2)
lm1<-lm(y~x1)
lm1
summary(lm1)
lm1<-lm(y~x1 -1)
summary(lm1)
lm1
lm1$residuals
plot(lm1)
lm1$residuals
lm2<-lm(lm1$residuals~x2)
summary(lm2)
y=rnorm(100)
x1=sample(c("hh","hm","mm"),size=100,replace=T)
x2=y+rnorm(100,3,2)
hist(y)
table(x1)
hist(x2)
lm1<-lm(y~x1 -1)
summary(lm1)
plot(lm1)
summary(lm1)
summary(lm2)
install.packages("mapview")
df <- read_csv("https://raw.githubusercontent.com/fastah/sample-data/master/FastahDatasetMapsTutorial.csv")
library(mapview)
coordinates(df) <- ~ lon + lat
proj4string(df) <- "+init=epsg:4326"
mapview(df)
library(ggmap)
p<-get_map(source="cloudmade", maptype"satellite")
p<-get_map(source="cloudmade", maptype="satellite")
p<-get_map(source="osm", maptype="satellite")
p<-get_map(source="stamen", maptype="satellite")
p<-get_map(source="stamen")
p<-get_map(source="osm", maptype="satellite")
p<-get_map(source="osm")
p<-get_openstreetmap()
osm <- get_openstreetmap()
ggmap(osm)
get_openstreetmap(urlonly = TRUE)
api_key <- 'b23b0358e87c4ff99f81029eda25c903'
map <- get_cloudmademap(api_key = api_key)
ggmap(map)
gc <- geocode("waco, texas", source = "google")
# API_KEY="AIzaSyDJZvgBvHZTjBFzj5_zCLv6M2JBSmLYqiQ"
# API_KEY="AIzaSyABpaBkO08NR-NR7s_vN8aCG15KXLb_fpw"
register_google(key = "AIzaSyABpaBkO08NR-NR7s_vN8aCG15KXLb_fpw")
# the scale argument can be seen in the following
# (make your graphics device as large as possible)
ggmap(get_googlemap(center, scale = 1), extent = "panel") # pixelated
p$
### example
d <- function(x=-95.36, y=29.76, n,r,a){
round(data.frame(
lon = jitter(rep(x,n), amount = a),
lat = jitter(rep(y,n), amount = a)
), digits = r)
}
df <- d(n=50,r=3,a=.3)
p$
### example
d <- function(x=-95.36, y=29.76, n,r,a){
round(data.frame(
lon = jitter(rep(x,n), amount = a),
lat = jitter(rep(y,n), amount = a)
), digits = r)
}
### example
d <- function(x=-95.36, y=29.76, n,r,a){
round(data.frame(
lon = jitter(rep(x,n), amount = a),
lat = jitter(rep(y,n), amount = a)
), digits = r)
}
df <- d(n=50,r=3,a=.3)
map <- get_googlemap(markers = df, path = df, scale = 2,key=API_KEY)
ggmap(map)
ggmap(map, extent = "device") +
geom_point(aes(x = lon, y = lat), data = df, size = 3, colour = "black") +
geom_path(aes(x = lon, y = lat), data = df)
gc <- geocode("waco, texas", source = "google")
center <- as.numeric(gc)
ggmap(get_googlemap(center = center, color = "bw", scale = 2), extent = "device")
# the scale argument can be seen in the following
# (make your graphics device as large as possible)
ggmap(get_googlemap(center, scale = 1), extent = "panel") # pixelated
ggmap(get_googlemap(center, scale = 2), extent = "panel") # fine
# archiving; note that you must meet google's terms for this condition
map <- get_googlemap(archiving = TRUE)
str(p)
p
p<-get_map(source="google", maptype="satellite")
p<-get_map(source="google", maptype="satellite")
library(rgdal)
p
class(p)
str(p)
plot(p)
raster::plot.raster(library(ggmap)
library(raster)
library(rgdal)
# courtesy R Lovelace
ggmap_rast <- function(map){
map_bbox <- attr(map, 'bb')
.extent <- extent(as.numeric(map_bbox[c(2,4,1,3)]))
my_map <- raster(.extent, nrow= nrow(map), ncol = ncol(map))
rgb_cols <- setNames(as.data.frame(t(col2rgb(map))), c('red','green','blue'))
red <- my_map
values(red) <- rgb_cols[['red']]
green <- my_map
values(green) <- rgb_cols[['green']]
blue <- my_map
values(blue) <- rgb_cols[['blue']]
stack(red,green,blue)
}
dc <- get_map(location = 'DC', zoom = 12)
dc.rast <- ggmap_rast(map = dc) # convert google map to raster object
nhbds <- readOGR("Census_Tracts_-_2010", "Census_Tracts_-_2010") # use rgdal to preserve projection
dc.only <- mask(dc.rast, nhbds) # clip to bounds of census tracts
# prep raster as a data frame for printing with ggplot
dc.df <- data.frame(rasterToPoints(dc.only))
ggplot(dc.df) +
geom_point(aes(x=x, y=y, col=rgb(layer.1/255, layer.2/255, layer.3/255))) +
scale_color_identity())
raster::raster.plot(p)
raster:::raster.plot(p)
raster:::plot(p)
raster:::plot.raster(p)
str(p)
ggmap
# courtesy R Lovelace
ggmap_rast <- function(map){
map_bbox <- attr(map, 'bb')
.extent <- extent(as.numeric(map_bbox[c(2,4,1,3)]))
my_map <- raster(.extent, nrow= nrow(map), ncol = ncol(map))
rgb_cols <- setNames(as.data.frame(t(col2rgb(map))), c('red','green','blue'))
red <- my_map
values(red) <- rgb_cols[['red']]
green <- my_map
values(green) <- rgb_cols[['green']]
blue <- my_map
values(blue) <- rgb_cols[['blue']]
stack(red,green,blue)
}
dc.rast <- ggmap_rast(map = dc) # convert google map to raster object
dc <- get_map(location = 'DC', zoom = 12)
dc <- get_map(location = 'DC', zoom = 12)
dc.rast <- ggmap_rast(map = dc) # convert google map to raster object
# courtesy R Lovelace
ggmap_rast <- function(map){
map_bbox <- attr(map, 'bb')
.extent <- extent(as.numeric(map_bbox[c(2,4,1,3)]))
my_map <- raster(.extent, nrow= nrow(map), ncol = ncol(map))
rgb_cols <- setNames(as.data.frame(t(col2rgb(map))), c('red','green','blue'))
red <- my_map
values(red) <- rgb_cols[['red']]
green <- my_map
values(green) <- rgb_cols[['green']]
blue <- my_map
values(blue) <- rgb_cols[['blue']]
stack(red,green,blue)
}
library(raster)
dc.rast <- ggmap_rast(map = dc) # convert google map to raster object
dc.rast
map=p
map=dc
map_bbox <- attr(map, 'bb')
.extent <- extent(as.numeric(map_bbox[c(2,4,1,3)]))
my_map <- raster(.extent, nrow= nrow(map), ncol = ncol(map))
my_map
rgb_cols <- setNames(as.data.frame(t(col2rgb(map))), c('red','green','blue'))
rgb_cols
red <- my_map
red
values(red) <- rgb_cols[['red']]
red
plot(red)
green <- my_map
values(green) <- rgb_cols[['green']]
blue <- my_map
values(blue) <- rgb_cols[['blue']]
dc.rast
dc <- get_map(location = 'DC', zoom = 12,maptype = "satellite")
dc.rast <- ggmap_rast(map = dc) # convert google map to raster object
dc.rast$layer.1 %>% plot
library(dplyr)
dc.rast$layer.1 %>% plot
#dc.rast$layer.1 %>% plot
?dismo::gmap
g = gmap('Australia')
library(dismo)
gs = gmap('Sydney, New South Wales, Australia', type='satellite')
dc.rast$layer.2 %>% plot
dc.rast$layer.3 %>% plot
# huge map
p1<-get_map(source="google", maptype="satellite",
lat=38.3460, lon=0.4907,zoom=40)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38.3460, lon=0.4907),
zoom=40)
plot(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38.3460, lon=0.4907),
zoom=1)
ggmap(p1)
p1.rast<-ggmap_rast(p1)
p1.rast
dc.rast
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38.3460, lon=0.4907),
zoom=21)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38.3460, lon=0.4907),
zoom=20)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38.3460, lon=0.4907),
zoom=18)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38.3460, lon=0.4907),
zoom=15)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38.34, lon=0.49),
zoom=15)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38, lon=0.5),
zoom=15)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38, lon=0.5),
zoom=10)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38, lon=0.5),
zoom=1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38, lon=0.5),
zoom=11)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38, lon=0.5),
zoom=10)
ggmap(p1)
p1.rast<-ggmap_rast(p1)
p1.rast
haversine
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=38, lon=0),
zoom=10)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=37, lon=0),
zoom=10)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=37, lon=0),
zoom=5)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=37, lon=-1),
zoom=10)
ggmap(p1)
# huge map
p1<-get_map(source="google", maptype="satellite",
location=c(lat=37, lon=-2),
zoom=10)
ggmap(p1)
p1.rast<-ggmap_rast(p1)
p1.rast
p1.rast
ggmap(p1.rast$layer.1)
plot(p1.rast$layer.1)
x = rnorm(100, mean = 10, sd = 2)
y = rnorm(100, mean = 20, sd = 2)
bimodal =c(x,y)
shapiro.test(bimodal)
hist(bimodal)
library(magrittr)
library(dplyr)
occ_count
?occ_search
??occ_search
?typeStatus
??typeStatus
# occ_count(taxonKey=6, georeferenced=TRUE)
d<-occ_search(taxonKey=6, hasCoordinate=TRUE, limit = 20,
fields=c('acceptedScientificName',
'acceptedTaxonKey',
'basisOfRecord',
"catalogNumber",
"class",
"classKey",
"collectionCode",
"continent",
"coordinateUncertaintyInMeters",
"country",
"countryCode",
"datasetID",
"datasetKey",
"day",
"decimalLatitude",
"decimalLongitude",
"family",
"familyKey",
"gbifID",
"genericName",
"genus",
"genusKey",
"geodeticDatum",
"higherClassification",
"identificationVerificationStatus",
"institutionCode",
"issues",
"key",
"kingdom",
"kingdomKey"
"locality",
"month",
"municipality",
"name",
"networkKeys",
"occurrenceID",
"order",
"orderKey",
"phylum",
"phylumKey",
"protocol",
"scientificName",
"scientificNameID",
"species",
"speciesKey",
"specificEpithet",
"taxonID",
"taxonKey",
"taxonRank",
"taxonRemarks",
"taxonomicStatus",
"type",
"year"
))
# occ_count(taxonKey=6, georeferenced=TRUE)
d<-occ_search(taxonKey=6, hasCoordinate=TRUE, limit = 20,
fields=c('acceptedScientificName',
'acceptedTaxonKey',
'basisOfRecord',
"catalogNumber",
"class",
"classKey",
"collectionCode",
"continent",
"coordinateUncertaintyInMeters",
"country",
"countryCode",
"datasetID",
"datasetKey",
"day",
"decimalLatitude",
"decimalLongitude",
"family",
"familyKey",
"gbifID",
"genericName",
"genus",
"genusKey",
"geodeticDatum",
"higherClassification",
"identificationVerificationStatus",
"institutionCode",
"issues",
"key",
"kingdom",
"kingdomKey",
"locality",
"month",
"municipality",
"name",
"networkKeys",
"occurrenceID",
"order",
"orderKey",
"phylum",
"phylumKey",
"protocol",
"scientificName",
"scientificNameID",
"species",
"speciesKey",
"specificEpithet",
"taxonID",
"taxonKey",
"taxonRank",
"taxonRemarks",
"taxonomicStatus",
"type",
"year"
))
occ_count(taxonKey=6, georeferenced=TRUE)
occ_count(taxonKey=6, georeferenced=TRUE,publishingCountry="US")
r<-raster("~/imageTOCOGeoTiffExample.tif")
library(raster)
r<-raster("~/imageTOCOGeoTiffExample.tif")
r<-raster("~/imageToCOGeoTiffExample.tif")
r<-raster("~/GoogleDrive/imageToCOGeoTiffExample.tif")
r<-raster("~/GoogleDrive/imageToDriveExample.tif")
setwd("~/deepbios/dbio/img")
r<-raster("imageToCOGeoTiffExample.tif.crdownload")
plot(r[[1]])
r
#  quick plot
plot(d$decimalLatitude ~d$decimalLongitude)
library(dplyr)
library(moiR)
d = read.delim("toy.csv",sep="\t",header = T)
#  quick plot
plot(d$decimalLatitude ~d$decimalLongitude)
getwd(9)
getwd()
d = read.delim("toy.csv",sep="\t",header = T)
list.files()
setwd("../gbif/")
library(dplyr)
library(moiR)
d = read.delim("toy.csv",sep="\t",header = T)
#  quick plot
plot(d$decimalLatitude ~d$decimalLongitude)
# columns of interest
colnames(d) %>%
as.matrix
mycolumns<-c("decimalLatitude","decimalLongitude","family")
which(colnames(d) %in% mycolumns)
# get top families
countmy<-table(d$order %>% fc)
mytops<-names(countmy)[which(fn(countmy)>10)]
d$family<-fc(d$family)
d$order<-fc(d$order)
d %>%
dplyr::select(decimalLatitude,decimalLongitude, order) %>%
dplyr::filter(decimalLatitude<50 &
decimalLongitude< -50 &
decimalLongitude > -140) %>%
dplyr::filter(order %in% c(mytops)) ->
sd
dim(sd)
plot(sd$decimalLatitude ~sd$decimalLongitude)
ggplot(sd,aes(x=decimalLongitude,y=decimalLatitude,color=order)) +
geom_point()
library(ggplot)
library(ggplot2)
ggplot(sd,aes(x=decimalLongitude,y=decimalLatitude,color=order)) +
geom_point()
library(cowplot)
ggplot(sd,aes(x=decimalLongitude,y=decimalLatitude,color=order)) +
geom_point()
dim(sd)
pdf("mapobservations.pdf",height = 4,width = 8)
ggplot(sd,aes(x=decimalLongitude,y=decimalLatitude,color=order)) +
geom_point()
dev.off()
unique(d$species)
pdf("mapobservations.pdf",height = 3,width = 16)
ggplot(sd,aes(x=decimalLongitude,y=decimalLatitude,color=order)) +
geom_point()
dev.off()
pdf("mapobservations.pdf",height = 5,width = 16)
ggplot(sd,aes(x=decimalLongitude,y=decimalLatitude,color=order)) +
geom_point()
dev.off()
d$family<-fc(d$family)
d$order<-fc(d$order)
d %>%
dplyr::select(decimalLatitude,decimalLongitude, order) %>%
dplyr::filter(decimalLatitude<50 &
decimalLongitude< -50 &
decimalLongitude > -140) %>%
dplyr::filter(order %in% c(mytops)) ->
sd
dim(sd)
plot(sd$decimalLatitude ~sd$decimalLongitude)
write.tsv(sd,"ptoy.csv")
d %>%
dplyr::select(decimalLatitude,decimalLongitude, order) %>%
dplyr::filter(decimalLatitude<50 &
decimalLongitude< -50 &
decimalLongitude > -140) ->
sd
dim(sd)
sd %>%
dplyr::filter(order %in% c(mytops)) ->
ssd
dim(ssd)
